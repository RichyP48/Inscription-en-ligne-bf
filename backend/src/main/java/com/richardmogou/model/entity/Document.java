package com.richardmogou.model.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "documents", indexes = {
        @Index(name = "idx_document_user_type", columnList = "user_id, document_type")
})
public class Document {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull(message = "User cannot be null")
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id", nullable = false)
    private User user; // The applicant who uploaded the document

    @NotNull(message = "Document type cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(name = "document_type", nullable = false, length = 50)
    private DocumentType documentType;

    // Original filename as provided by the user during upload
    @NotBlank(message = "Original filename cannot be blank")
    @Size(max = 255)
    @Column(name = "original_filename", nullable = false)
    private String originalFilename;

    // Unique filename/path generated by the storage service (relative to storage root)
    @NotBlank(message = "Stored filename cannot be blank")
    @Size(max = 512) // Allow for longer paths/UUIDs
    @Column(name = "stored_filename", nullable = false, unique = true, length = 512)
    private String storedFilename;

    @NotNull(message = "File size cannot be null")
    @Column(name = "file_size", nullable = false)
    private Long fileSize; // Size in bytes

    @NotBlank(message = "Content type cannot be blank")
    @Size(max = 100)
    @Column(name = "content_type", nullable = false, length = 100)
    private String contentType; // MIME type

    @NotNull(message = "Document status cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false, length = 30)
    @Builder.Default
    private DocumentStatus status = DocumentStatus.UPLOADED; // Default status upon creation

    @Column(name = "uploaded_at", nullable = false, updatable = false)
    private LocalDateTime uploadedAt;

    @Column(name = "validated_at")
    private LocalDateTime validatedAt; // Timestamp when validation completed (success or fail)

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @Size(max = 500)
    @Column(name = "validation_notes", length = 500)
    private String validationNotes; // Optional notes from validator/system (e.g., rejection reason)

    @PrePersist
    protected void onCreate() {
        LocalDateTime now = LocalDateTime.now();
        uploadedAt = now;
        updatedAt = now;
        if (status == null) { // Ensure default status if not set by builder
             status = DocumentStatus.UPLOADED;
        }
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
        // Optionally update validatedAt if status changes to VALIDATED or REJECTED
        if (status == DocumentStatus.VALIDATED || status == DocumentStatus.REJECTED) {
            if (validatedAt == null) { // Set only once
                 validatedAt = updatedAt;
            }
        }
    }
}